apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    // 用于编译的SDK版本
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    // 用于Gradle编译项目的工具版本
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    defaultConfig {
        // 最低支持Android版本
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        // 目标版本
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        // 版本号
        versionCode rootProject.ext.android["versionCode"]
        // 版本名称
        versionName rootProject.ext.android["versionName"]

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

    }

    buildTypes {
        // 调试版本
        debug {
            // minifyEnabled是否启用混淆
            minifyEnabled false
            // Zipalign优化
            zipAlignEnabled true
            // 加载默认混淆配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [
                    BaiduMobAd_STAT_ID  : baidu_Mtj
            ]
            buildConfigField("String", "BUGLY_APP_ID", "\"${Bugly_app_id}\"")
            buildConfigField("boolean", "BUGLY_IS_DEBUG", "${Bugly_is_Debug}")
            buildConfigField("boolean", "LEAKCANARY_IS_DEBUG", "${LeakCanary_is_Debug}")
        }
        // 发布版本
        release {
            // minifyEnabled是否启用混淆
            minifyEnabled false
            // 删除无效的Resource
            shrinkResources false
            // Zipalign优化
            zipAlignEnabled true
            // 加载默认混淆配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [
                    BaiduMobAd_STAT_ID  : baidu_Mtj
            ]
            buildConfigField("String", "BUGLY_APP_ID", "\"${Bugly_app_id}\"")
            buildConfigField("boolean", "BUGLY_IS_DEBUG", "${Bugly_is_Debug}")
            buildConfigField("boolean", "LEAKCANARY_IS_DEBUG", "${LeakCanary_is_Debug}")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            jniLibs.srcDir 'libs'
        }
    }
}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    // design依赖
    api 'com.android.support:design:28.0.0'
    api 'com.android.support:appcompat-v7:28.0.0'
    api 'com.android.support:support-v4:28.0.0'
    api 'com.android.support.constraint:constraint-layout:1.1.3'
    api 'com.android.support:gridlayout-v7:28.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    // 提供Activities和Fragments基础组件。使用到的相关类：ObservableTransformer、RxAppCompatActivity
    api rootProject.ext.dependencies["rxlifecycle-components"]
    // Retrofit2.0依赖
    api rootProject.ext.dependencies["retrofit"]
    // 结果转为实体类所需依赖。使用到的相关类：GsonConverterFactory
    api rootProject.ext.dependencies["converter-gson"]
    // 结果转为基本类型所需依赖，一般为String。使用到的相关类：ScalarsConverterFactory
    api rootProject.ext.dependencies["converter-scalars"]
    // RxJava2.0+Retrofit2.0适配依赖。使用到的相关类：RxJava2CallAdapterFactory
    api rootProject.ext.dependencies["adapter-rxjava2"]
    // OKHttp3.0依赖
    api rootProject.ext.dependencies["okhttp"]
    // OKHttp3.0日志拦截器依赖。使用到的相关类：HttpLoggingInterceptor
    api rootProject.ext.dependencies["logging-interceptor"]
    // Glide图片加载库
    api rootProject.ext.dependencies["glide"]
    annotationProcessor rootProject.ext.dependencies["glide-compiler"]
    // 其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如1.3.7
    api 'com.tencent.bugly:crashreport_upgrade:1.3.7'
    // 阿里路由
    api rootProject.ext.dependencies["arouter-api"]
    api rootProject.ext.dependencies["arouter-compiler"]
    // 微信支付
    api rootProject.ext.dependencies["wechat-pay"]
    api 'com.android.support:multidex:1.0.3'
    // 内存泄漏检测库
    debugApi 'com.squareup.leakcanary:leakcanary-android:1.6.2'
    releaseApi 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.2'
    // Optional, if you use support library fragments:
    debugApi 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.2'
}
